% the whole MRF framework

clc;clear;%close all;

addpath('utils\');
cd utils\UGM;
addpath(genpath(pwd));
cd ..
cd ..
addpath('mainCode\');
addpath('funcs\');

load result/patchData_4_high3;
%load result/coeffs;

scale=4;
psize=sqrt(size(lowdata,2));
psize_high=psize;
half=(psize+1)/2;
localSize=5;
w1=1;
w2=0;

inputFile='cones';
original=imread(['inputs/', inputFile, '_clean.png']);
%crop the original for downsampling
sz = size(original);
sz = sz - mod(sz, scale);
original = original(1:sz(1), 1:sz(2));

input=imresize(original,1/scale,'nearest');
input=double(input);
low=imresize(input,scale,'nearest');
edgesl = edge(low,'canny',0.1);

% shock filter parameters
para.dt=0.1;
para.h=1;
para.iter=20;   %120 for scale=8
para.lam=0.00;
para.lam_tld=1;
para.a=0.4;
para.theta=pi/1000;
para.smooth=0;

low0=real(shock(low,para.iter,para.dt,para.h,'cmp',[para.lam,para.lam_tld,para.a])); 
edgesl0 = edge(low0,'canny',0.1);

[candidateH, index, diff, structure, mask] = ...
    genCandidate (edgesl, edgesl0, highdataU, lowdataTrans, scale, psize, localSize);


[unary edgePots edgeEnds] = createGraph(candidateH, index, diff, structure, edgesl, half);
%save('result/graph_5.mat','unary', 'edgePots', 'edgeEnds');

[labelling, energy1, energy2]=infer(w2, unary, edgePots, edgeEnds);
energy1+energy2

%reconstruct
output=zeros(size(edgesl));
count=ones(size(edgesl));
for i=1:length(index)
    ii=(index(i,1)-1)-half+1;
    jj=(index(i,2)-1)-half+1;
    output(ii:ii+psize_high-1,jj:jj+psize_high-1)=...
        output(ii:ii+psize_high-1,jj:jj+psize_high-1)+...
        reshape(candidateH(i, labelling(i),:),psize_high, psize_high);
    count(ii:ii+psize_high-1,jj:jj+psize_high-1)=...
        count(ii:ii+psize_high-1,jj:jj+psize_high-1)+1;
end


output=output./count;
output=(output>0.17);

figure;imshow(uint8(output*255));

final(:,:,1)=output;
final(:,:,2)=output;
final(:,:,3)=output;

final(:,:,1)=final(:,:,1)+mask;
figure;imshow(uint8(final*255));

% super-resolution
%{
fprintf('super-resolution...\n');
highres=blup_low(scale, input, output);
figure;imshow(uint8(highres));
imwrite(uint8(highres),['outputs/', inputFile, '_', num2str(scale), '.png']);
%}



