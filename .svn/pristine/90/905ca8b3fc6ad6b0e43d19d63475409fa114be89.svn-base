% mrf learning without smooth constraint
function [highres, edges]=mrfLearning(name, indexn, w1, w2, localSize, scale, threshold, show)

addpath('mainCode\');
addpath('funcs\');
addpath('edges\');

load result/patchData_4_high3;
%load result/coeffs;

if(nargin==7)
    show=1;
end

psize=sqrt(size(lowdata,2));
psize_high=psize;
half=(psize+1)/2;


inputFile=name{indexn};

% for middlebury data
if indexn<=4
    original=imread(['inputs/', inputFile, '_clean.png']);
    %crop the original for downsampling
    sz = size(original);
    sz = sz - mod(sz, scale);
    original = original(1:sz(1), 1:sz(2));

    input=imresize(original,1/scale,'nearest');
else
    load (['inputs/', inputFile]);
    if indexn==5
        input=bilateralOMA(D);
    else
        input=D;
    end
end

input=double(input);
low=imresize(input,scale,'nearest');
edgesl = edge(low,'canny',threshold);   %0.1
low0=imresize(input,scale,'bicubic');

para.dt=0.1;
para.h=1;
para.iter=20;   %120 for scale=8
para.lam=0.00;
para.lam_tld=1;
para.a=0.4;
para.theta=pi/1000;
para.smooth=0;

% run shock filter
low0=real(shock(low,para.iter,para.dt,para.h,'cmp',[para.lam,para.lam_tld,para.a])); 
edgesl0 = edge(low0,'canny',threshold);   %0.1


edgeslTmp=edgesl;
num=1;
output=zeros(size(input)*scale);
count=ones(size(input)*scale);
index=[];
query=[];

for i=half+1:size(edgesl,1)-half
    for j=half+1:size(edgesl,2)-half
        if (edgeslTmp(i,j)==1)
            patch=edgesl(i-half+1:i+half-1, j-half+1:j+half-1);
            patch0=edgesl0(i-half+1:i+half-1, j-half+1:j+half-1);
            
            %{
            [edgelist, labelededgeim] = edgelink(patch, 5);
            
            if (size(edgelist,2)>1)
                k=labelededgeim(half,half);
                [edgelist0, labelededgeim0] = edgelink(patch0, 5);
                patch=(labelededgeim==k);
                patch0=(labelededgeim0==k);
            end
            %}
 
            patchTrans=bwdist(patch);
            
            query(num,:)=double([patchTrans(:);w1*patch0(:)]);
            index(num,:)=[i-half+1,j-half+1];
            num=num+1;
            
            % avoid repeating too many neighbor pixels
            edgeslTmp(max(i-localSize,1):min(i+localSize,size(edgesl,1)),...
                max(j-localSize,1):min(j+localSize,size(edgesl,2)))=0;      
        end
    end
end


sdata=[lowdataTrans w1*highdataU];
%sdata=[highdataTrans w1*highdataU];
if (show)
    fprintf('finding the knn...\n');
end
[idx, dist] = knnsearch(sdata,query);
if (show)
    fprintf('reconstructing edges...\n');
end


%reconstruct
output=zeros(size(input)*scale);
count=ones(size(input)*scale);
confidence=output;
for i=1:length(index)
    ii=(index(i,1));
    jj=(index(i,2));
    output(ii:ii+psize_high-1,jj:jj+psize_high-1)=...
        output(ii:ii+psize_high-1,jj:jj+psize_high-1)+...
        reshape(highdataU(idx(i),:),psize_high, psize_high);
    
        count(ii:ii+psize_high-1,jj:jj+psize_high-1)=...
            count(ii:ii+psize_high-1,jj:jj+psize_high-1)+1;
end


output=output./count;
output=(output>0.2);
if (show)
    figure;imshow(uint8(output*255));
end
edges=output;


% super-resolution
if (show)
    fprintf('super-resolution...\n');
end
highres=blup_lowPath(scale, input, output);

if indexn<=4  
    if (show)
        figure;imshow(uint8(highres));
        imwrite(uint8(highres),['outputs/', inputFile, '2_', num2str(scale), '.png']);
        imwrite(uint8(output*255),['outputs/', inputFile, '2_edge_', num2str(scale), '.png']);
    end
else 
    save(['outputs/',inputFile, '_SRout.mat'],'highres');
    s=highres(11:end-11,11:end-11);
    tmp=(highres-min(s(:)))/(max(s(:))-min(s(:)));
    if (show)
        figure;imshow(uint8(tmp*255));
        imwrite(uint8(tmp*255),['outputs/',inputFile, '_SR.png']);
    end
    
end




