% mrf learning with smooth constraint
function [highres,edges]=mrfLearning2(name, indexn, w1, w2, localSize, scale, threshold, show)

addpath('mainCode\');
addpath('funcs\');
addpath('edges\');

load result/patchData_4_high3;
addpath('utils\');
cd utils\UGM;
addpath(genpath(pwd));
cd ..
cd ..
addpath('mainCode\');
addpath('funcs\');

load result/patchData_4_high3;
%load result/coeffs;

psize=sqrt(size(lowdata,2));
psize_high=psize;
half=(psize+1)/2;

inputFile=name{indexn};

% for middlebury data
if indexn<=4
    original=imread(['inputs/', inputFile, '_clean.png']);
    %crop the original for downsampling
    sz = size(original);
    sz = sz - mod(sz, scale);
    original = original(1:sz(1), 1:sz(2));

    input=imresize(original,1/scale,'nearest');
else
    load (['inputs/', inputFile]);
    if indexn==5
        input=bilateralOMA(D);
    else
        input=D;
    end
end

input=double(input);
low=imresize(input,scale,'nearest');
edgesl = edge(low,'canny',threshold);   %0.1
low0=imresize(input,scale,'bicubic');

% shock filter parameters
para.dt=0.1;
para.h=1;
para.iter=20;   %120 for scale=8
para.lam=0.00;
para.lam_tld=1;
para.a=0.4;
para.theta=pi/1000;
para.smooth=0;

low0=real(shock(low,para.iter,para.dt,para.h,'cmp',[para.lam,para.lam_tld,para.a])); 
edgesl0 = edge(low0,'canny',0.1);

[candidateH, candidateHTrans, index, diff, structure, mask] = ...
    genCandidate (edgesl, edgesl0, highdataU, lowdataTrans, highdataTrans, scale, psize, localSize, w1);


[unary edgePots edgeEnds] = createGraph(candidateH, candidateHTrans, index, diff, structure, edgesl, half);
%save('result/graph_5.mat','unary', 'edgePots', 'edgeEnds');

[labelling, energy1, energy2]=infer(w2, unary, edgePots, edgeEnds);

%reconstruct
output=zeros(size(edgesl));
count=ones(size(edgesl));
for i=1:length(index)
    ii=(index(i,1))-half+1;
    jj=(index(i,2))-half+1;
    output(ii:ii+psize_high-1,jj:jj+psize_high-1)=...
        output(ii:ii+psize_high-1,jj:jj+psize_high-1)+...
        reshape(candidateH(i, labelling(i),:),psize_high, psize_high);
    count(ii:ii+psize_high-1,jj:jj+psize_high-1)=...
        count(ii:ii+psize_high-1,jj:jj+psize_high-1)+1;
end


output=output./count;
output=(output>0.2);

if (show)
    figure;imshow(uint8(output*255));
end
% for temporally usage
edges=output;


% super-resolution

fprintf('super-resolution...\n');
%highres=blup_low(scale, input, output);
highres=blup_lowPath(scale, input, output);

if indexn<=4  
    if (show)
        figure;imshow(uint8(highres));
        imwrite(uint8(highres),['outputs/', inputFile, '2_', num2str(scale), '.png']);
    end
else 
    save(['outputs/',inputFile, '_SRout.mat'],'highres');
    s=highres(11:end-11,11:end-11);
    tmp=(highres-min(s(:)))/(max(s(:))-min(s(:)));
    if (show)
        figure;imshow(uint8(tmp*255));
        imwrite(uint8(tmp*255),['outputs/',inputFile, '_SR.png']);
    end
    imwrite(uint8(output*255),['outputs/', inputFile, '2_edge_', num2str(scale), '.png']);
end





