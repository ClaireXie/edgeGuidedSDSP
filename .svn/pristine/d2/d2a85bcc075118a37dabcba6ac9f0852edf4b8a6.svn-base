function [labelling, energy1, energy2]=infer(weight, unary, edgePots0, edgeEnds)

nNodes=size(unary,1);
nState=size(unary,2);
maxIter=100;
useMex=1;

edgePots=weight*edgePots0;

[V,E] = UGM_makeEdgeVE(edgeEnds,nNodes,useMex);
edgeStruct.edgeEnds = int32(edgeEnds);
edgeStruct.V = V;
edgeStruct.E = E;
edgeStruct.nNodes = nNodes;
edgeStruct.nEdges = size(edgeEnds,1);
edgeStruct.nStates = int32(repmat(nState,nNodes,1));
edgeStruct.useMex = useMex;
edgeStruct.maxIter = maxIter;

edgePots=exp(-1*permute(edgePots,[2, 3, 1]));
nodePots=exp(-1*unary/255); 


fprintf('Decoding using L-BP...\n');
edgeStruct.nStates=int32(edgeStruct.nStates);
LBPDecoding = UGM_Decode_LBP(nodePots,edgePots,edgeStruct);
labelling=LBPDecoding;

energy1=0;
for i=1:size(unary,1)
    energy1=energy1+unary(i,labelling(i));
end
energy2=0;
for i=1:size(edgePots0,1)
    ii=edgeEnds(i, 1);
    jj=edgeEnds(i, 2);
    energy2=energy2+1*edgePots0(i,labelling(ii), labelling(jj));
end

